for i = 13:25 
%% Run all predictions with fitted parameters

allParams = [0.0873255134145478,0.0873292241434789,0.0873135508506263,0.0873177749264125,0.0873320490225679,0.0873225514207846,0.0873934956596479,0.0873320692888635,0.0873267482113237,0.0873330295944660,0.0872247439462674,0.0873302021675396,0.0873288121058020,0.0873432265859365,0.0873032435954476,0.0635830457861452,0.0868211449876149,0.0906074129765357,0.0867693979339094,0.0888870039613523,0.0910977400097897,0.0866051421526636,0.0910303897859359,0.0909094816389540,0.0851728109201002;11575.1395877088,11692.4609477718,12990.5174790237,12740.4720920821,12840.4310510857,13115.7487713394,13148.2687644414,11019.5777124887,13096.4162931604,10782.7422148994,13148.2687644414,13147.4028416319,11082.6920591920,10767.6630506445,11145.4640987187,838.669721183356,0.829165498716759,0.0992799633068486,11952.9716040376,0.207836035323413,0.100226396344021,6522.60194390668,0.149978767012092,0.246101095487140,28280.3703138085;3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000,3.47300000000000;0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000,0.630000000000000;0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000,0.0220000000000000;0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710,0.0953534407832710;0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000,0.0630000000000000;3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000,3.40000000000000;6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05,6.94440098401957e-05;0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573,0.931539632572573;0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000,0.940000000000000;0.332812017821516,0.332795277796618,0.332796436514976,0.332799497735490,0.332795270021104,0.332797081295892,0.332795270021104,0.332796102955461,0.332795305022167,0.332795351557972,0.332824672474287,0.332795270021104,0.332801770878597,0.332797395257450,0.332849530197393,0.725567487964725,0.370238855807009,0.369771230925273,0.369772522245671,361540.718755369,0.369772553293599,0.369775097115263,0.369771911860290,0.369771223691664,0.369771223691664;3.64275383912747,3.64230384468189,3.63015512991198,3.63605950693410,3.64209863609270,3.63448735185903,3.70418534741829,3.64190443924593,3.63838731400322,3.64143515217626,3.58458743072088,3.64178326352658,3.63876119527470,3.62536596002569,3.61784093061949,307.862946731709,2.40031274399863,2.17742278236189,3.37291892557923,2.65847104058331,2.28215385335814,3.41558964304587,2.05094239878972,3.05420542209352,1.64383155964870;0.0396731754340479,0.0396804846373852,0.0399158568103650,0.0397334834724799,0.0397288732532653,0.0398134902058816,0.0397704729343026,0.0396819436289030,0.0397261163109960,0.0397195227570824,0.0403228382344719,0.0397845784818353,0.0397759740187117,0.0398919804138669,0.0396731754340479,0.00557633292313411,0.0314332441713426,0.0996489599426538,0.0440813060378310,0.0412800493089525,0.0996478639056556,0.0453537990476818,0.0996491119847927,0.0996355355142541,0.0880586113440008;3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06,3.60590558332886e-06;522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848,522.461562892848;7.32472978527046e-07,7.49829322703930e-07,6.53043596815309e-07,7.57902389731488e-07,6.47979105203612e-07,7.89877471939145e-07,7.37275652034267e-07,7.86771617499251e-07,7.82065843036452e-07,6.46485558330881e-07,7.55467397492534e-07,6.46630148758499e-07,7.83395056380370e-07,6.66187289047367e-07,6.76082566932013e-07,5.63142690735508e-10,1.10858754900685e-07,1.23734444637671e-06,7.18191093851791e-07,1.24786898821185e-12,9.84239595216279e-07,1.67629253403139e-07,1.14617625948011e-06,2.88571466493097e-11,1.10296108830958e-06;2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14,2.11790000000000e-14;0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464,0.00890492446248464;1.51693051665086e-06,1.69029121085946e-06,1.74492778844523e-06,1.72505707066509e-06,1.48887913594142e-06,1.61687249395736e-06,1.56282450563653e-06,1.50965658994571e-06,1.78141427822661e-06,1.53058582623183e-06,1.72339863699473e-06,1.45752077309450e-06,1.45850845509795e-06,1.45775167896340e-06,1.75536165228446e-06,0.664135864436170,1.84389462703413e-06,1.62573766016398e-06,1.61946752566056e-06,0.946556639849312,0.560031408248563,2.46116800191919e-06,0.558185164797105,0.883888073692688,2.12342433498417e-06;6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19,6.24319015544175e+19;1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18,1.24666666666667e+18;3.32067999178372e+19,3.32067999178372e+19,3.26774583526561e+19,3.29779372701952e+19,3.31338810324627e+19,3.27075753576069e+19,3.14443439818612e+19,3.31918560713998e+19,3.27439754510019e+19,3.25264602727961e+19,3.16998129023786e+19,3.32067969944974e+19,3.27422560565982e+19,3.32067999178372e+19,3.26239026974040e+19,3.29258259143316e+19,2.24122559803080e+15,1.34175271308578e+19,3.01879999253066e+19,1.98050447483374e+19,1.34367922693118e+19,3.01740153385001e+19,1.33414628172121e+19,1.30683054247035e+19,1.15850756727700e+15;1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18,1.50000000000000e+18;1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935,1473768.31716935;25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822,25411.9710818822;7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10,7.19657640940400e-10;8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16,8.86666666666666e+16;222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538,222259396258.538;6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20,6.05425148255444e+20;2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18,2.26667000000000e+18;2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000,2.60000000000000;3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42,3.37781253293389e+42;1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32,1.88558024253291e+32;0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659,0.185193148706659;7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334,7.70208273767334;140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820,140519167.828820;0.164045169886872,0.152953928635902,0.138760014649452,0.167857388570444,0.140232977333697,0.140734339544788,0.137351354429797,0.166501637948794,0.167834103620380,0.166122354636549,0.163609930113096,0.161101847175048,0.137379736651844,0.137351354429797,0.137666799511364,152159.929832909,130430.579893872,152159.862559806,0.152612616033108,0.153427161197616,0.158968108850379,0.494158862206696,152157.701802912,152107.831388082,134172.689971697;16068.1871081355,15059.5958330885,14748.2864558246,14834.2084370801,14855.7491292311,14784.3273006739,14867.4513328496,14871.6079270113,14839.8012633179,14825.8341090256,15098.6915191451,14830.3719470891,14809.3547752369,15772.6648434277,15544.2103334610,81113.0892982917,405.687773710366,392237.296247092,15843.2996941283,7104.22019547017,392237.332821941,8043.25861195021,392237.061737989,1145.18620594652,138.876411056947;6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000,6.03333333300000;0.00603944102172838,0.00608828431660725,0.00608857004905026,0.00608039875517090,0.00608835116613500,0.00608612008483907,0.00608688976571932,0.00608882168269999,0.00608826872678789,0.00608518975006735,0.00608576779969667,0.00608791535219002,0.00608405452168755,0.00608882168269999,0.00603446146779446,0.0118302362333309,0.00759172912331776,0.00188226139912497,0.00553529243881817,0.00849333708893447,0.00233166666976475,0.00810381717743362,0.00184489728935394,0.0296028133551251,0.0301089508097645;34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104,34.9335920891104;5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000,5883333.33300000;5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000,5054000;5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000,5991.60000000000;13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767,13.5679804667767;120.572356192157,117.119628959850,116.566785422931,116.574916576889,116.566391917079,116.570053320855,116.566387335113,116.580083006505,116.566769551238,116.566439953287,118.626670661596,116.566387335113,116.566799276161,120.371208740404,119.006858736429,491.429507360639,79.6189576523099,3.53659932826802,129.518208150125,71.1849782021397,3.49675793612342,152.616768786801,3.89303100310343,56.4015082575439,3.82245305160715;71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463,71.7639228703463;1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00,1666670000000.00;4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000,4.94333333300000;23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719,23693.7812326719;2120827445.53909,2121115894.23387,2120655951.54055,2120738554.25016,2120657788.27700,2120665281.98369,2121098749.39190,2120677066.57236,2120654773.04594,2120658531.21136,2120707153.13132,2120654759.79722,2120654770.31675,2120720522.82001,2120654759.64618,3861079578.85626,3088489407448.98,102524932.466441,2356283066.27353,1149368876.48992,90232177.0152448,2071705203.72963,92701260.0199686,302623836.133626,396665420.450275;11510.1934348296,10174.7626991936,11349.5524034323,11614.6174239118,12221.7512094867,10380.1191531065,10247.8709951487,12344.3003710904,11016.8070837813,12262.8754295301,10832.4627143174,12146.2378901694,11246.9219381065,10252.6608799808,10176.1637141367,8029.13393761199,0.336369112283784,11301.6966642940,11305.2918879929,11329.8046746756,11221.6509667038,11321.5707214293,11302.5212903446,5530.65786259562,1.17676373452624;1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884,1.16195406394884;7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06,7.66515227390273e-06;0.0542963832403534,0.0573901739943277,0.0582162787079544,0.0579924115973903,0.0579399576844894,0.0581094385212868,0.0582627357532555,0.0578752064121933,0.0580228635785156,0.0580530358565074,0.0570183717423492,0.0579765144690647,0.0580655613056095,0.0546961177443900,0.0558303402496149,0.0133775231303291,0.161986043035937,11.0960412744630,0.0554807992744664,0.0851865264761065,11.2647971884061,0.0809474583014432,13.6989970596046,0.264470825685825,0.529613863933587;0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056,0.0116295748900056;66961018.6682702,66681967.5629000,67222049.3708765,67211478.2528919,67220440.8492550,67222049.3708765,64509341.5514422,67222049.3708765,67127537.4744988,67021925.2915796,65631387.9368877,67217347.2267968,67222049.3708765,66177822.1749829,67222036.9515608,63561452.2496371,2383.46565160669,162.552638368572,61110953.9735241,63010455.2778468,161.867035027661,63653784.8564238,177.296704639906,63782080.3636237,524810.031131314;0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000,0.0112000000000000;0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000;0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.100000000000000;0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965,0.000101245183125965;10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10;0.295793877531261,0.320895001352027,0.336083004306448,0.306231787473752,0.279667991682983,0.284520958862237,0.280673135845557,0.278854239316805,0.279143618869351,0.279140752460981,0.340821848053873,0.278854239316805,0.278931005157392,0.306448737117312,0.331914251203573,0.310599589186243,0.326872662168765,309187.033754062,0.309838043685339,309723.116591791,309723.116591791,0.316054631891744,309574.814778883,0.311099964074279,0.501920357447190;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718,4.94504614144718;0.00930215992974941,0.0105755297497342,0.00902524870601083,0.0102727450682662,0.00900875483440848,0.00974922176271430,0.00993590414626051,0.00903437764486326,0.00904355990686526,0.00906254670640134,0.00963539534566100,0.00915371508697219,0.00919996982089539,0.00921525802073887,0.00900872380649520,0.0106568067769085,0.0121117975664221,9988.70628647860,0.0100096931183280,10000,12.1995165033639,0.0104351466595931,3077.78635305321,0.0100760690124648,60.1714387011386;0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896,0.000131549504007896;3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05,3.85674100988622e-05;2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06,2.45370521709496e-06;2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06,2.02188088145663e-06;6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e-07,6.26289667577847e

p  = allParams(:,i);
filename = ['20210624_Graham_Paramset_', num2str(i)]

[observables] = AllPredictions_CollectedTimeCourse(p);
params = p;
%% Get Reaction Velocity averages
[aveSpegel3,aveSpegel6, aveSpegel10, aveSpegel15, aveGoehring45, aveMalmgren60, allAve, Spegel3, Spegel6, Spegel10, Spegel15, Goehring45, Malmgren60 ] = GetAveRxnRate(p);
ReactionRates.aveSpegel3 = aveSpegel3;
ReactionRates.aveSpegel6 =aveSpegel6;
ReactionRates.aveSpegel10 = aveSpegel10;
ReactionRates.aveSpegel15 = aveSpegel15;
ReactionRates.aveGoehring45 = aveGoehring45;
ReactionRates.aveMalmgren60 = aveMalmgren60;
ReactionRates.allAve = allAve;
ReactionRates.Spegel3 = Spegel3;
ReactionRates.Spegel6 = Spegel6;
ReactionRates.Spegel10 = Spegel10;
ReactionRates.Spegel15 = Spegel15;
ReactionRates.Goehring45 = Goehring45;
ReactionRates.Malmgren60 = Malmgren60;



%% Overall PLSR
% Data: average reaction rate through each reaction, 16.7/2.8 conditions
x = allAve;
x(~isfinite(x)) = 0.001;
%x(:,6) = [];
x = x + (-1)*(min(x, [], 'all')- 1);
x = log10(x);
xMean = mean(x);
xStdev = std(x);
z_x = ((x - xMean)./xStdev)';

y = [2.583404584 6.367200618 10.67644605 10.50733969 11.5];
y = log10(y);
yMean = mean(y);
yStdev = std(y);
y = (y - yMean)./yStdev;
z_y = y';
% Labels 
X_row_labels = {'Spegel3' 'Spegel6' 'Spegel10' 'Spegel15' 'Malmgren60'};
X_col_labels = {'GLUT_reaction';'GK_reaction'; 'HK_reaction'; 'HPI_reaction';'PFK1_reaction';'ALDO_reaction';'TPI_reaction';'GAPDH_reaction';'PGK_reaction';'PGAM_reaction';'ENO_reaction';'PYK_reaction';'LDH_reaction';'AK_reaction';'ATPase_reaction';'OxPhos_reaction';'DHAses_reaction';'MCT_reaction';'G6PD_reaction';'sixPGDH_reaction';'RPE_reaction';'RPI_reaction';'PRPPS_reaction';'TK1_reaction';'TK2_reaction';'TA_reaction';'GPX_reaction';'GSSGR_reaction';'PDH_reaction';'CS_reaction';'ACON_reaction';'IDH_reaction';'AKGD_reaction';'SCOAS_reaction';'SDH_reaction';'FUM_reaction';'MDH2_reaction';'GOT2_reaction';'MDH1_reaction';'GOT1_reaction';'AKGMAL_reaction';'ASPGLU_reaction';'PYRH_reaction';'CITMAL_reaction';'ISOCITMAL_reaction';'MALPi_reaction';'GLUH_reaction';'CLY_reaction';'MMALIC_reaction';'CMALIC_reaction';'PC_reaction';'GLS_reaction';'GDH_reaction';'GPT_reaction';'ASCT2_reaction';'Aconitase2_reaction';'cIDH_reaction';'Oxtransfer_reaction';'ALDR_reaction';'SoDH_reaction';'VfruT'};
% Run PLSR
ncomp = 3; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;
% create a loadings plot:
matches = zeros(max(size(x_loadings(:,2))),max(size(x_loadings(:,2)))); % allocate matrix
if size(unique(x_loadings(:,1:2))) ~= size(x_loadings(:,1:2)) % check if there all values are unique
 [C,ia,ic] = unique(x_loadings(:,1:2),'rows'); % getting all unique values
end
duplicate_ind = setdiff(1:size(x_loadings, 1), ia); % get indices of values that were repeated
duplicate_value = x_loadings(duplicate_ind, 1:2); % storing duplicate values
% VIP Scores
% Calculate normalized PLS weights
W0 = bsxfun(@rdivide,stats.W,sqrt(sum(stats.W.^2,1)));
% Calculate the product of summed squares of XS and YL
sumSq = sum(x_scores.^2,1).*sum(y_loadings.^2,1);
% Calculate VIP scores for NCOMP components
vipScores = sqrt(size(x_loadings,1) * sum(bsxfun(@times,sumSq,W0.^2),2) ./ sum(sumSq,2));
x1 = C(:,1); %if portion above is not used, replace C with x_loadings
y1 = C(:,2);
% Cross-validation
ncomp = 3; %use only 2 components ? change this to desired number of components
fcv = 5; %perform PLSR with 5-fold cross-validation -- this is an integer value, up to the total number of
%rows in the input data sets (for this sample data set, can be up to 8)
mcreps = 5; %number of Monte-Carlo repetitions used during cross-validation
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp, 'CV',fcv);
%Calculate Q2Y values for each model component using mean squared errors from plsregress' cross-validation. 
PRESS = mse(2,2:end);
TSS = sum((z_y-mean(z_y)).^2);
Q2Y = 1- (PRESS/TSS);
yfit = [ones(n,1) z_x]*beta;
RSS = sum((z_y-yfit).^2);
Rsquared = 1 - (RSS/TSS);

%Outputs overall PLSR
PLSR_Overall.X_row_labels = X_row_labels;
PLSR_Overall.X_col_labels = X_col_labels;
PLSR_Overall.Q2Y = Q2Y;
PLSR_Overall.Rsquared = Rsquared;
PLSR_Overall.z_x = z_x;
PLSR_Overall.z_y = z_y;
PLSR_Overall.yfitPLS = yfitPLS;
PLSR_Overall.W0 = W0;
PLSR_Overall.vipscores = vipScores;
PLSR_Overall.loading1 = x1; 
PLSR_Overall.loading2 = y1;
PLSR_Overall.explainedVariance = cumsum(100*pctvar(2,:));
PLSR_Overall.ncomp = ncomp;
% Vary PLSR parameters
ncomp = 3; 
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
everyParam = [];
for i = 1:size(z_x,2)
[n,p] = size(z_x);
yfitPLSTotal = [ones(n,1) z_x]*beta;
all = {};
z_xOrig = z_x;
for k = 1:size(z_x, 1)
fitOrig = real(yfitPLSTotal(k));
fitOrig = 10^((fitOrig*yStdev)+yMean);
paramNum = i;
origX = real(z_x(k,paramNum));
times = [0.05 0.5 1 2 20].*origX;
resulting  = [];
for j = 1:size(times, 2)
        z_x(k, paramNum)=times(j);
        yfitPLS = real([ones(1,1) z_x(k,:)]*beta);
        yfitPLS = 10^((yfitPLS*yStdev)+yMean);
       resulting(1,j) = yfitPLS/fitOrig;
       z_x(k, paramNum) =z_xOrig(k,paramNum);
    end
  all{k} = resulting;  
end
X = all;
Y = cat(3,X{:});
out = mean(Y,3);
everyParam(i,:) = out;
end
log2_varied = log2(everyParam);
PLSR_Overall.varyParams = everyParam;
PLSR_Overall.log2_varied = log2_varied;

%% Spegel3 PLSR
% Data: average reaction rate through each reaction, 16.7/2.8 conditions
x = ReactionRates.Spegel3;
x(~isfinite(x)) = 0.001;
x = x + (-1)*(min(x, [], 'all')- 1);
x = log10(x);
xMean = mean(x);
xStdev = std(x);
z_x = ((x - xMean)./xStdev)';

ins_val = 2.583404584; 
range = ins_val - 1;
y = 1+range/size(x,2):range/size(x,2):ins_val;
y = log10(y);
yMean = mean(y);
yStdev = std(y);
y = (y - yMean)./yStdev;
z_y = y';

% Labels 
X_row_labels = {'1' '2' '3' };
X_col_labels = {'GLUT_reaction';'GK_reaction'; 'HK_reaction'; 'HPI_reaction';'PFK1_reaction';'ALDO_reaction';'TPI_reaction';'GAPDH_reaction';'PGK_reaction';'PGAM_reaction';'ENO_reaction';'PYK_reaction';'LDH_reaction';'AK_reaction';'ATPase_reaction';'OxPhos_reaction';'DHAses_reaction';'MCT_reaction';'G6PD_reaction';'sixPGDH_reaction';'RPE_reaction';'RPI_reaction';'PRPPS_reaction';'TK1_reaction';'TK2_reaction';'TA_reaction';'GPX_reaction';'GSSGR_reaction';'PDH_reaction';'CS_reaction';'ACON_reaction';'IDH_reaction';'AKGD_reaction';'SCOAS_reaction';'SDH_reaction';'FUM_reaction';'MDH2_reaction';'GOT2_reaction';'MDH1_reaction';'GOT1_reaction';'AKGMAL_reaction';'ASPGLU_reaction';'PYRH_reaction';'CITMAL_reaction';'ISOCITMAL_reaction';'MALPi_reaction';'GLUH_reaction';'CLY_reaction';'MMALIC_reaction';'CMALIC_reaction';'PC_reaction';'GLS_reaction';'GDH_reaction';'GPT_reaction';'ASCT2_reaction';'Aconitase2_reaction';'cIDH_reaction';'Oxtransfer_reaction';'ALDR_reaction';'SoDH_reaction';'VfruT'};
% Run PLSR
ncomp = 2; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;
% create a loadings plot:
matches = zeros(max(size(x_loadings(:,2))),max(size(x_loadings(:,2)))); % allocate matrix
if size(unique(x_loadings(:,1:2))) ~= size(x_loadings(:,1:2)) % check if there all values are unique
 [C,ia,ic] = unique(x_loadings(:,1:2),'rows'); % getting all unique values
end
duplicate_ind = setdiff(1:size(x_loadings, 1), ia); % get indices of values that were repeated
duplicate_value = x_loadings(duplicate_ind, 1:2); % storing duplicate values
% VIP Scores
% Calculate normalized PLS weights
W0 = bsxfun(@rdivide,stats.W,sqrt(sum(stats.W.^2,1)));
% Calculate the product of summed squares of XS and YL
sumSq = sum(x_scores.^2,1).*sum(y_loadings.^2,1);
% Calculate VIP scores for NCOMP components
vipScores = sqrt(size(x_loadings,1) * sum(bsxfun(@times,sumSq,W0.^2),2) ./ sum(sumSq,2));
x1 = C(:,1); %if portion above is not used, replace C with x_loadings
y1 = C(:,2);
% Cross-validation
ncomp = 2; %use only 2 components ? change this to desired number of components
fcv = 3; %perform PLSR with 5-fold cross-validation -- this is an integer value, up to the total number of
%rows in the input data sets (for this sample data set, can be up to 8)
mcreps = 5; %number of Monte-Carlo repetitions used during cross-validation
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp, 'CV',fcv);
%Calculate Q2Y values for each model component using mean squared errors from plsregress' cross-validation. 
PRESS = mse(2,2:end);
TSS = sum((z_y-mean(z_y)).^2);
Q2Y = 1- (PRESS/TSS);
yfit = [ones(n,1) z_x]*beta;
RSS = sum((z_y-yfit).^2);
Rsquared = 1 - (RSS/TSS);

% Run PLSR
ncomp = 2; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;

%Outputs overall PLSR
PLSR_Spegel3.X_row_labels = X_row_labels;
PLSR_Spegel3.X_col_labels = X_col_labels;
PLSR_Spegel3.Q2Y = Q2Y;
PLSR_Spegel3.Rsquared = Rsquared;
PLSR_Spegel3.z_x = z_x;
PLSR_Spegel3.z_y = z_y;
PLSR_Spegel3.yfitPLS = yfitPLS;
PLSR_Spegel3.W0 = W0;
PLSR_Spegel3.loading1 = x1; 
PLSR_Spegel3.loading2 = y1;
PLSR_Spegel3.explainedVariance = cumsum(100*pctvar(2,:));
PLSR_Spegel3.ncomp = ncomp;
PLSR_Spegel3.vipscores = vipScores;

% Vary PLSR parameters 
everyParam = [];
for i = 1:size(z_x,2)
[n,p] = size(z_x);
yfitPLSTotal = [ones(n,1) z_x]*beta;
all = {};
z_xOrig = z_x;
for k = 1:size(z_x, 1)
fitOrig = yfitPLSTotal(k);
fitOrig = 10^((fitOrig*yStdev)+yMean);
paramNum = i;
origX = real(z_x(k,paramNum));
times = [0.05 0.5 1 2 20].*origX;
resulting  = [];
for j = 1:size(times, 2)
        z_x(k, paramNum)=times(j);
        yfitPLS = real([ones(1,1) z_x(k,:)]*beta);
        yfitPLS = 10^((yfitPLS*yStdev)+yMean);
       resulting(1,j) = yfitPLS/fitOrig;
       z_x(k, paramNum) =z_xOrig(k,paramNum);
    end
  all{k} = resulting;  
end
X = all;
Y = cat(3,X{:});
out = mean(Y,3);
everyParam(i,:) = out;
end
log2_varied = log2(everyParam);
PLSR_Spegel3.varyParams = everyParam;
PLSR_Spegel3.log2_varied = log2_varied;
%% Spegel6 PLSR
% Data: average reaction rate through each reaction, 16.7/2.8 conditions
x = ReactionRates.Spegel6;
x(~isfinite(x)) = 0.001;
x = x + (-1)*(min(x, [], 'all')- 1);
x = log10(x);
xMean = mean(x);
xStdev = std(x);
z_x = ((x - xMean)./xStdev)';

ins_val = 6.367200618; 
range = ins_val - 1;
y = 1+range/size(x,2):range/size(x,2):ins_val;
y = log10(y);
yMean = mean(y);
yStdev = std(y);
y = (y - yMean)./yStdev;
z_y = y';

% Labels 
X_row_labels = {'1' '2' '3' '4' '5' '6' };
X_col_labels = {'GLUT_reaction';'GK_reaction'; 'HK_reaction'; 'HPI_reaction';'PFK1_reaction';'ALDO_reaction';'TPI_reaction';'GAPDH_reaction';'PGK_reaction';'PGAM_reaction';'ENO_reaction';'PYK_reaction';'LDH_reaction';'AK_reaction';'ATPase_reaction';'OxPhos_reaction';'DHAses_reaction';'MCT_reaction';'G6PD_reaction';'sixPGDH_reaction';'RPE_reaction';'RPI_reaction';'PRPPS_reaction';'TK1_reaction';'TK2_reaction';'TA_reaction';'GPX_reaction';'GSSGR_reaction';'PDH_reaction';'CS_reaction';'ACON_reaction';'IDH_reaction';'AKGD_reaction';'SCOAS_reaction';'SDH_reaction';'FUM_reaction';'MDH2_reaction';'GOT2_reaction';'MDH1_reaction';'GOT1_reaction';'AKGMAL_reaction';'ASPGLU_reaction';'PYRH_reaction';'CITMAL_reaction';'ISOCITMAL_reaction';'MALPi_reaction';'GLUH_reaction';'CLY_reaction';'MMALIC_reaction';'CMALIC_reaction';'PC_reaction';'GLS_reaction';'GDH_reaction';'GPT_reaction';'ASCT2_reaction';'Aconitase2_reaction';'cIDH_reaction';'Oxtransfer_reaction';'ALDR_reaction';'SoDH_reaction';'VfruT'};
% Run PLSR
ncomp = 3; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;
% create a loadings plot:
matches = zeros(max(size(x_loadings(:,2))),max(size(x_loadings(:,2)))); % allocate matrix
if size(unique(x_loadings(:,1:2))) ~= size(x_loadings(:,1:2)) % check if there all values are unique
 [C,ia,ic] = unique(x_loadings(:,1:2),'rows'); % getting all unique values
end
duplicate_ind = setdiff(1:size(x_loadings, 1), ia); % get indices of values that were repeated
duplicate_value = x_loadings(duplicate_ind, 1:2); % storing duplicate values
% VIP Scores
% Calculate normalized PLS weights
W0 = bsxfun(@rdivide,stats.W,sqrt(sum(stats.W.^2,1)));
% Calculate the product of summed squares of XS and YL
sumSq = sum(x_scores.^2,1).*sum(y_loadings.^2,1);
% Calculate VIP scores for NCOMP components
vipScores = sqrt(size(x_loadings,1) * sum(bsxfun(@times,sumSq,W0.^2),2) ./ sum(sumSq,2));
x1 = C(:,1); %if portion above is not used, replace C with x_loadings
y1 = C(:,2);
% Cross-validation
ncomp = 3; %use only 2 components ? change this to desired number of components
fcv = 3; %perform PLSR with 5-fold cross-validation -- this is an integer value, up to the total number of
%rows in the input data sets (for this sample data set, can be up to 8)
mcreps = 5; %number of Monte-Carlo repetitions used during cross-validation
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp, 'CV',fcv);
%Calculate Q2Y values for each model component using mean squared errors from plsregress' cross-validation. 
PRESS = mse(2,2:end);
TSS = sum((z_y-mean(z_y)).^2);
Q2Y = 1- (PRESS/TSS);
yfit = [ones(n,1) z_x]*beta;
RSS = sum((z_y-yfit).^2);
Rsquared = 1 - (RSS/TSS);

% Run PLSR
ncomp = 3; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;

%Outputs overall PLSR
PLSR_Spegel6.X_row_labels = X_row_labels;
PLSR_Spegel6.X_col_labels = X_col_labels;
PLSR_Spegel6.Q2Y = Q2Y;
PLSR_Spegel6.Rsquared = Rsquared;
PLSR_Spegel6.z_x = z_x;
PLSR_Spegel6.z_y = z_y;
PLSR_Spegel6.yfitPLS = yfitPLS;
PLSR_Spegel6.W0 = W0;
PLSR_Spegel6.loading1 = x1; 
PLSR_Spegel6.loading2 = y1;
PLSR_Spegel6.explainedVariance = cumsum(100*pctvar(2,:));
PLSR_Spegel6.ncomp = ncomp;
PLSR_Spegel6.vipscores = vipScores;

% Vary PLSR parameters 
everyParam = [];
for i = 1:size(z_x,2)
[n,p] = size(z_x);
yfitPLSTotal = [ones(n,1) z_x]*beta;
all = {};
z_xOrig = z_x;
for k = 1:size(z_x, 1)
fitOrig = yfitPLSTotal(k);
fitOrig = 10^((fitOrig*yStdev)+yMean);
paramNum = i;
origX = real(z_x(k,paramNum));
times = [0.05 0.5 1 2 20].*origX;
resulting  = [];
for j = 1:size(times, 2)
        [ i k j ]
        z_x(k, paramNum)=times(j);
        yfitPLS = real([ones(1,1) z_x(k,:)]*beta);
        yfitPLS = 10^((yfitPLS*yStdev)+yMean);
       resulting(1,j) = yfitPLS/fitOrig;
       z_x(k, paramNum) =z_xOrig(k,paramNum);
    end
  all{k} = resulting;  
end
X = all;
Y = cat(3,X{:});
out = mean(Y,3);
everyParam(i,:) = out;
end
log2_varied = log2(everyParam);
PLSR_Spegel6.varyParams = everyParam;
PLSR_Spegel6.log2_varied = log2_varied;

%% Spegel10 PLSR
% Data: average reaction rate through each reaction, 16.7/2.8 conditions
x = ReactionRates.Spegel10;
x(~isfinite(x)) = 0.001;
x = x + (-1)*(min(x, [], 'all')- 1);
x = log10(x);
xMean = mean(x);
xStdev = std(x);
z_x = ((x - xMean)./xStdev)';

ins_val = 10.67644605; 
range = ins_val - 1;
y = 1+range/size(x,2):range/size(x,2):ins_val;
y = log10(y);
yMean = mean(y);
yStdev = std(y);
y = (y - yMean)./yStdev;
z_y = y';

% Labels 
X_row_labels = {'1' '2' '3' '4' '5' '6' '7' '8' '9' '10' };
X_col_labels = {'GLUT_reaction';'GK_reaction'; 'HK_reaction'; 'HPI_reaction';'PFK1_reaction';'ALDO_reaction';'TPI_reaction';'GAPDH_reaction';'PGK_reaction';'PGAM_reaction';'ENO_reaction';'PYK_reaction';'LDH_reaction';'AK_reaction';'ATPase_reaction';'OxPhos_reaction';'DHAses_reaction';'MCT_reaction';'G6PD_reaction';'sixPGDH_reaction';'RPE_reaction';'RPI_reaction';'PRPPS_reaction';'TK1_reaction';'TK2_reaction';'TA_reaction';'GPX_reaction';'GSSGR_reaction';'PDH_reaction';'CS_reaction';'ACON_reaction';'IDH_reaction';'AKGD_reaction';'SCOAS_reaction';'SDH_reaction';'FUM_reaction';'MDH2_reaction';'GOT2_reaction';'MDH1_reaction';'GOT1_reaction';'AKGMAL_reaction';'ASPGLU_reaction';'PYRH_reaction';'CITMAL_reaction';'ISOCITMAL_reaction';'MALPi_reaction';'GLUH_reaction';'CLY_reaction';'MMALIC_reaction';'CMALIC_reaction';'PC_reaction';'GLS_reaction';'GDH_reaction';'GPT_reaction';'ASCT2_reaction';'Aconitase2_reaction';'cIDH_reaction';'Oxtransfer_reaction';'ALDR_reaction';'SoDH_reaction';'VfruT'};
% Run PLSR
ncomp = 3; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;
% create a loadings plot:
matches = zeros(max(size(x_loadings(:,2))),max(size(x_loadings(:,2)))); % allocate matrix
if size(unique(x_loadings(:,1:2))) ~= size(x_loadings(:,1:2)) % check if there all values are unique
 [C,ia,ic] = unique(x_loadings(:,1:2),'rows'); % getting all unique values
end
duplicate_ind = setdiff(1:size(x_loadings, 1), ia); % get indices of values that were repeated
duplicate_value = x_loadings(duplicate_ind, 1:2); % storing duplicate values
% VIP Scores
% Calculate normalized PLS weights
W0 = bsxfun(@rdivide,stats.W,sqrt(sum(stats.W.^2,1)));
% Calculate the product of summed squares of XS and YL
sumSq = sum(x_scores.^2,1).*sum(y_loadings.^2,1);
% Calculate VIP scores for NCOMP components
vipScores = sqrt(size(x_loadings,1) * sum(bsxfun(@times,sumSq,W0.^2),2) ./ sum(sumSq,2));
x1 = C(:,1); %if portion above is not used, replace C with x_loadings
y1 = C(:,2);
% Cross-validation
ncomp = 3; %use only 2 components ? change this to desired number of components
fcv = 3; %perform PLSR with 5-fold cross-validation -- this is an integer value, up to the total number of
%rows in the input data sets (for this sample data set, can be up to 8)
mcreps = 5; %number of Monte-Carlo repetitions used during cross-validation
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp, 'CV',fcv);
%Calculate Q2Y values for each model component using mean squared errors from plsregress' cross-validation. 
PRESS = mse(2,2:end);
TSS = sum((z_y-mean(z_y)).^2);
Q2Y = 1- (PRESS/TSS);
yfit = [ones(n,1) z_x]*beta;
RSS = sum((z_y-yfit).^2);
Rsquared = 1 - (RSS/TSS);

% Run PLSR
ncomp = 3; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;

%Outputs overall PLSR
PLSR_Spegel10.X_row_labels = X_row_labels;
PLSR_Spegel10.X_col_labels = X_col_labels;
PLSR_Spegel10.Q2Y = Q2Y;
PLSR_Spegel10.Rsquared = Rsquared;
PLSR_Spegel10.z_x = z_x;
PLSR_Spegel10.z_y = z_y;
PLSR_Spegel10.yfitPLS = yfitPLS;
PLSR_Spegel10.W0 = W0;
PLSR_Spegel10.loading1 = x1; 
PLSR_Spegel10.loading2 = y1;
PLSR_Spegel10.explainedVariance = cumsum(100*pctvar(2,:));
PLSR_Spegel10.ncomp = ncomp;
PLSR_Spegel10.vipscores = vipScores;

% Vary PLSR parameters 
everyParam = [];
for i = 1:size(z_x,2)
[n,p] = size(z_x);
yfitPLSTotal = [ones(n,1) z_x]*beta;
all = {};
z_xOrig = z_x;
for k = 1:size(z_x, 1)
fitOrig = yfitPLSTotal(k);
fitOrig = 10^((fitOrig*yStdev)+yMean);
paramNum = i;
origX = real(z_x(k,paramNum));
times = [0.05 0.5 1 2 20].*origX;
resulting  = [];
for j = 1:size(times, 2)
        [ i k j ]
        z_x(k, paramNum)=times(j);
        yfitPLS = real([ones(1,1) z_x(k,:)]*beta);
        yfitPLS = 10^((yfitPLS*yStdev)+yMean);
       resulting(1,j) = yfitPLS/fitOrig;
       z_x(k, paramNum) =z_xOrig(k,paramNum);
    end
  all{k} = resulting;  
end
X = all;
Y = cat(3,X{:});
out = mean(Y,3);
everyParam(i,:) = out;
end
log2_varied = log2(everyParam);
PLSR_Spegel10.varyParams = everyParam;
PLSR_Spegel10.log2_varied = log2_varied;

%% Spegel15 PLSR
% Data: average reaction rate through each reaction, 16.7/2.8 conditions
x = ReactionRates.Spegel15;
x(~isfinite(x)) = 0.001;
x = x + (-1)*(min(x, [], 'all')- 1);
x = log10(x);
xMean = mean(x);
xStdev = std(x);
z_x = ((x - xMean)./xStdev)';

ins_val = 10.50733969; 
range = ins_val - 1;
y = 1+range/size(x,2):range/size(x,2):ins_val;
y = log10(y);
yMean = mean(y);
yStdev = std(y);
y = (y - yMean)./yStdev;
z_y = y';

% Labels 
X_row_labels = {'1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13' '14' '15' };
X_col_labels = {'GLUT_reaction';'GK_reaction'; 'HK_reaction'; 'HPI_reaction';'PFK1_reaction';'ALDO_reaction';'TPI_reaction';'GAPDH_reaction';'PGK_reaction';'PGAM_reaction';'ENO_reaction';'PYK_reaction';'LDH_reaction';'AK_reaction';'ATPase_reaction';'OxPhos_reaction';'DHAses_reaction';'MCT_reaction';'G6PD_reaction';'sixPGDH_reaction';'RPE_reaction';'RPI_reaction';'PRPPS_reaction';'TK1_reaction';'TK2_reaction';'TA_reaction';'GPX_reaction';'GSSGR_reaction';'PDH_reaction';'CS_reaction';'ACON_reaction';'IDH_reaction';'AKGD_reaction';'SCOAS_reaction';'SDH_reaction';'FUM_reaction';'MDH2_reaction';'GOT2_reaction';'MDH1_reaction';'GOT1_reaction';'AKGMAL_reaction';'ASPGLU_reaction';'PYRH_reaction';'CITMAL_reaction';'ISOCITMAL_reaction';'MALPi_reaction';'GLUH_reaction';'CLY_reaction';'MMALIC_reaction';'CMALIC_reaction';'PC_reaction';'GLS_reaction';'GDH_reaction';'GPT_reaction';'ASCT2_reaction';'Aconitase2_reaction';'cIDH_reaction';'Oxtransfer_reaction';'ALDR_reaction';'SoDH_reaction';'VfruT'};
% Run PLSR
ncomp = 3; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;
% create a loadings plot:
matches = zeros(max(size(x_loadings(:,2))),max(size(x_loadings(:,2)))); % allocate matrix
if size(unique(x_loadings(:,1:2))) ~= size(x_loadings(:,1:2)) % check if there all values are unique
 [C,ia,ic] = unique(x_loadings(:,1:2),'rows'); % getting all unique values
end
duplicate_ind = setdiff(1:size(x_loadings, 1), ia); % get indices of values that were repeated
duplicate_value = x_loadings(duplicate_ind, 1:2); % storing duplicate values
% VIP Scores
% Calculate normalized PLS weights
W0 = bsxfun(@rdivide,stats.W,sqrt(sum(stats.W.^2,1)));
% Calculate the product of summed squares of XS and YL
sumSq = sum(x_scores.^2,1).*sum(y_loadings.^2,1);
% Calculate VIP scores for NCOMP components
vipScores = sqrt(size(x_loadings,1) * sum(bsxfun(@times,sumSq,W0.^2),2) ./ sum(sumSq,2));
x1 = C(:,1); %if portion above is not used, replace C with x_loadings
y1 = C(:,2);
% Cross-validation
ncomp = 3; %use only 2 components ? change this to desired number of components
fcv = 3; %perform PLSR with 5-fold cross-validation -- this is an integer value, up to the total number of
%rows in the input data sets (for this sample data set, can be up to 8)
mcreps = 5; %number of Monte-Carlo repetitions used during cross-validation
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp, 'CV',fcv);
%Calculate Q2Y values for each model component using mean squared errors from plsregress' cross-validation. 
PRESS = mse(2,2:end);
TSS = sum((z_y-mean(z_y)).^2);
Q2Y = 1- (PRESS/TSS);
yfit = [ones(n,1) z_x]*beta;
RSS = sum((z_y-yfit).^2);
Rsquared = 1 - (RSS/TSS);

% Run PLSR
ncomp = 3; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;

%Outputs overall PLSR
PLSR_Spegel15.X_row_labels = X_row_labels;
PLSR_Spegel15.X_col_labels = X_col_labels;
PLSR_Spegel15.Q2Y = Q2Y;
PLSR_Spegel15.Rsquared = Rsquared;
PLSR_Spegel15.z_x = z_x;
PLSR_Spegel15.z_y = z_y;
PLSR_Spegel15.yfitPLS = yfitPLS;
PLSR_Spegel15.W0 = W0;
PLSR_Spegel15.loading1 = x1; 
PLSR_Spegel15.loading2 = y1;
PLSR_Spegel15.explainedVariance = cumsum(100*pctvar(2,:));
PLSR_Spegel15.ncomp = ncomp;
PLSR_Spegel15.vipscores = vipScores;

% Vary PLSR parameters 
everyParam = [];
for i = 1:size(z_x,2)
[n,p] = size(z_x);
yfitPLSTotal = [ones(n,1) z_x]*beta;
all = {};
z_xOrig = z_x;
for k = 1:size(z_x, 1)
fitOrig = yfitPLSTotal(k);
fitOrig = 10^((fitOrig*yStdev)+yMean);
paramNum = i;
origX = real(z_x(k,paramNum));
times = [0.05 0.5 1 2 20].*origX;
resulting  = [];
for j = 1:size(times, 2)
        [ i k j ]
        z_x(k, paramNum)=times(j);
        yfitPLS = real([ones(1,1) z_x(k,:)]*beta);
        yfitPLS = 10^((yfitPLS*yStdev)+yMean);
       resulting(1,j) = yfitPLS/fitOrig;
       z_x(k, paramNum) =z_xOrig(k,paramNum);
    end
  all{k} = resulting;  
end
X = all;
Y = cat(3,X{:});
out = mean(Y,3);
everyParam(i,:) = out;
end
log2_varied = log2(everyParam);
PLSR_Spegel15.varyParams = everyParam;
PLSR_Spegel15.log2_varied = log2_varied;

%% Malmgren 60 PLSR
% Data: average reaction rate through each reaction, 16.7/2.8 conditions
x = ReactionRates.Malmgren60;
x(~isfinite(x)) = 0.001;
x = x + (-1)*(min(x, [], 'all')- 1);
x = log10(x);
xMean = mean(x);
xStdev = std(x);
z_x = ((x - xMean)./xStdev)';

ins_val = 11.5; 
range = ins_val - 1;
y = 1+range/size(x,2):range/size(x,2):ins_val;
y = log10(y);
yMean = mean(y);
yStdev = std(y);
y = (y - yMean)./yStdev;
z_y = y';

% Labels 
X_row_labels = {'1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13' '14' '15' '16' '17' '18' '19' '20' '21' '22' '23' '24' '25' '26' '27' '28' '29' '30' ...
    '31' '32' '33' '34' '35' '36' '37' '38' '39' '40' '41' '42' '43' '44' '45' '46' '47' '48' '49' '50' '51' '52' '53' '54' '55' '56' '57' '58' '59' '60'};
X_col_labels = {'GLUT_reaction';'GK_reaction'; 'HK_reaction'; 'HPI_reaction';'PFK1_reaction';'ALDO_reaction';'TPI_reaction';'GAPDH_reaction';'PGK_reaction';'PGAM_reaction';'ENO_reaction';'PYK_reaction';'LDH_reaction';'AK_reaction';'ATPase_reaction';'OxPhos_reaction';'DHAses_reaction';'MCT_reaction';'G6PD_reaction';'sixPGDH_reaction';'RPE_reaction';'RPI_reaction';'PRPPS_reaction';'TK1_reaction';'TK2_reaction';'TA_reaction';'GPX_reaction';'GSSGR_reaction';'PDH_reaction';'CS_reaction';'ACON_reaction';'IDH_reaction';'AKGD_reaction';'SCOAS_reaction';'SDH_reaction';'FUM_reaction';'MDH2_reaction';'GOT2_reaction';'MDH1_reaction';'GOT1_reaction';'AKGMAL_reaction';'ASPGLU_reaction';'PYRH_reaction';'CITMAL_reaction';'ISOCITMAL_reaction';'MALPi_reaction';'GLUH_reaction';'CLY_reaction';'MMALIC_reaction';'CMALIC_reaction';'PC_reaction';'GLS_reaction';'GDH_reaction';'GPT_reaction';'ASCT2_reaction';'Aconitase2_reaction';'cIDH_reaction';'Oxtransfer_reaction';'ALDR_reaction';'SoDH_reaction';'VfruT'};
% Run PLSR
ncomp = 3; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;
% create a loadings plot:
matches = zeros(max(size(x_loadings(:,2))),max(size(x_loadings(:,2)))); % allocate matrix
if size(unique(x_loadings(:,1:2))) ~= size(x_loadings(:,1:2)) % check if there all values are unique
 [C,ia,ic] = unique(x_loadings(:,1:2),'rows'); % getting all unique values
end
duplicate_ind = setdiff(1:size(x_loadings, 1), ia); % get indices of values that were repeated
duplicate_value = x_loadings(duplicate_ind, 1:2); % storing duplicate values
% VIP Scores
% Calculate normalized PLS weights
W0 = bsxfun(@rdivide,stats.W,sqrt(sum(stats.W.^2,1)));
% Calculate the product of summed squares of XS and YL
sumSq = sum(x_scores.^2,1).*sum(y_loadings.^2,1);
% Calculate VIP scores for NCOMP components
vipScores = sqrt(size(x_loadings,1) * sum(bsxfun(@times,sumSq,W0.^2),2) ./ sum(sumSq,2));
x1 = C(:,1); %if portion above is not used, replace C with x_loadings
y1 = C(:,2);
% Cross-validation
ncomp = 3; %use only 2 components ? change this to desired number of components
fcv = 3; %perform PLSR with 5-fold cross-validation -- this is an integer value, up to the total number of
%rows in the input data sets (for this sample data set, can be up to 8)
mcreps = 5; %number of Monte-Carlo repetitions used during cross-validation
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp, 'CV',fcv);
%Calculate Q2Y values for each model component using mean squared errors from plsregress' cross-validation. 
PRESS = mse(2,2:end);
TSS = sum((z_y-mean(z_y)).^2);
Q2Y = 1- (PRESS/TSS);
yfit = [ones(n,1) z_x]*beta;
RSS = sum((z_y-yfit).^2);
Rsquared = 1 - (RSS/TSS);

% Run PLSR
ncomp = 3; %use only 5 components ? change this to desired number of components
[x_loadings, y_loadings, x_scores, y_scores, beta, pctvar, mse, stats] = plsregress(z_x, z_y, ncomp); 
% Plot predicted vs observed response
[n,p] = size(z_x);
yfitPLS = [ones(n,1) z_x]*beta;

%Outputs overall PLSR
PLSR_Malmgren60.X_row_labels = X_row_labels;
PLSR_Malmgren60.X_col_labels = X_col_labels;
PLSR_Malmgren60.Q2Y = Q2Y;
PLSR_Malmgren60.Rsquared = Rsquared;
PLSR_Malmgren60.z_x = z_x;
PLSR_Malmgren60.z_y = z_y;
PLSR_Malmgren60.yfitPLS = yfitPLS;
PLSR_Malmgren60.W0 = W0;
PLSR_Malmgren60.loading1 = x1; 
PLSR_Malmgren60.loading2 = y1;
PLSR_Malmgren60.explainedVariance = cumsum(100*pctvar(2,:));
PLSR_Malmgren60.ncomp = ncomp;
PLSR_Malmgren60.vipscores = vipScores;

% Vary PLSR parameters 
everyParam = [];
for i = 1:size(z_x,2)
[n,p] = size(z_x);
yfitPLSTotal = [ones(n,1) z_x]*beta;
all = {};
z_xOrig = z_x;
for k = 1:size(z_x, 1)
fitOrig = yfitPLSTotal(k);
fitOrig = 10^((fitOrig*yStdev)+yMean);
paramNum = i;
origX = real(z_x(k,paramNum));
times = [0.05 0.5 1 2 20].*origX;
resulting  = [];
for j = 1:size(times, 2)
        z_x(k, paramNum)=times(j);
        yfitPLS = real([ones(1,1) z_x(k,:)]*beta);
        [ i k j ]
        yfitPLS = 10^((yfitPLS*yStdev)+yMean);
       resulting(1,j) = yfitPLS/fitOrig;
       z_x(k, paramNum) =z_xOrig(k,paramNum);
    end
  all{k} = resulting;  
end
X = all;
Y = cat(3,X{:});
out = mean(Y,3);
everyParam(i,:) = out;
end
log2_varied = log2(everyParam);
PLSR_Malmgren60.varyParams = everyParam;
PLSR_Malmgren60.log2_varied = log2_varied;

%% Varying Kinetic Model
p = params;
varyBy = [0.1 0.2 0.5 2 5 10];
p_labels = {'Vf_glut';'Vf_gk';'Vf_hpi';'Vr_hpi';'Vf_pfk1';'Vf_aldo';'Vr_aldo';'Vf_tpi';'Vf_gapdh';'Vf_pgk';'Vf_pgam';'Vf_eno';'Vf_pyk';'Vf_ldh';'Vr_ldh';'Vf_ak';'Vf_atpase';'Vr_atpase';'Vf_ox';'Vf_mct1';'Vf_g6pd';'Vr_g6pd';'Vf_6pgdh';'Vr_6pgdh';'Vf_rpe';'Vf_rpi';'Vf_prpps';'Vf_tk1';'Vr_tk1';'Vf_tk2';'Vf_ta';'Vf_gpx';'Vf_gssgr';'Vr_gssgr';'Vf_pdh';'Vf_cs';'Vf_acon';'Vf_idh';'Vf_akgd';'Vf_s';'Vf_sdh';'Vf_fum';'Vf_mdh2';'Vf_got2';'Vf_mdh1';'Vf_got1';'Vf_akgmal';'Vf_aspglu';'Vf_pyrh';'Vf_citmal';'Vf_malpi';'Vf_gluh';'Vf_cly';'Vf_malic';'Vf_cmalic';'Vf_pc';'Vf_gls';'Vf_gdh';'Vf_gpt';'Vf_asct2';'f1_asct2';'Kgluout_asct2';'Kgluin_asct2';'f2_asct2';'Keq1_asct2';'Kgluout1_asct2';'Kgluin1_asct2';'Vf_aconitase';'Vf_cIDH';'Vf_isocitmal';'Glu_out';'gk_K1GLC';'gk_K1ATP';'E_aldr';'Vm_SoDH';'kfruT';'Ct_PyP';'Ct_Pyr';'k1_aldr';'Vm_r_SoDH';'Vf_hk'};
[observables] = AllPredictions_CollectedTimeCourse(p);
[aveSpegel3,aveSpegel6, aveSpegel10, aveSpegel15, aveGoehring45, aveMalmgren60, allAve, Spegel3, Spegel6, Spegel10, Spegel15, Goehring45, Malmgren60 ] = GetAveRxnRate(params);
All_avg_BASE = allAve;
Spegel3_avg_BASE = aveSpegel3;
Spegel6_avg_BASE= aveSpegel6;
Spegel10_avg_BASE= aveSpegel10;
Spegel15_avg_BASE= aveSpegel15;
Goehring45_avg_BASE= aveGoehring45;
Malmgren60_avg_BASE = aveMalmgren60;
FC_everyparam =[];
log2FC_everyparam =[];
All_avg = [];
Spegel3_avg = [];
Spegel6_avg = [];
Spegel10_avg = [];
Spegel15_avg = [];
Graham30_avg =[];
Goehring45_avg = [];
Malmgren60_avg = [];
Spegel3_tot = [];
Spegel6_tot = [];
Spegel10_tot = [];
Spegel15_tot = [];
Graham30_tot = [];
Goehring45_tot = [];
Malmgren60_tot= [];
for j = 1:size(varyBy, 2)
    
    for i = 1:size(p, 1)
        params = p;
        params(i) =  varyBy(j)*params(i);
        [ varyBy(j)  p_labels(i) ]
        variedObservable = AllPredictions_CollectedTimeCourse(params);
        FC_everyparam{j,i} = variedObservable ./ observables;
        log2FC_everyparam{j,i} = log2(variedObservable ./ observables);

        [aveSpegel3,aveSpegel6, aveSpegel10, aveSpegel15, aveGoehring45, aveMalmgren60, allAve, Spegel3, Spegel6, Spegel10, Spegel15, Goehring45, Malmgren60 ] = GetAveRxnRate(params);
        All_avg{j,i} = allAve;
        Spegel3_avg{j,i} = aveSpegel3;
        Spegel6_avg{j,i} = aveSpegel6;
        Spegel10_avg{j,i} = aveSpegel10;
        Spegel15_avg{j,i} = aveSpegel15;
        Goehring45_avg{j,i} = aveGoehring45;
        Malmgren60_avg{j,i} = aveMalmgren60;
        Spegel3_tot{j,i} = Spegel3;
        Spegel6_tot{j,i} = Spegel6;
        Spegel10_tot{j,i} = Spegel10;
        Spegel15_tot{j,i} = Spegel15;
        Goehring45_tot{j,i} = Goehring45;
        Malmgren60_tot{j,i} = Malmgren60; 
        
        All_avg_FC{j,i} = allAve ./ All_avg_BASE;
        Spegel3_avg_FC{j,i} = aveSpegel3 ./ Spegel3_avg_BASE;
        Spegel6_avg_FC{j,i} = aveSpegel6 ./ Spegel6_avg_BASE;
        Spegel10_avg_FC{j,i} = aveSpegel10 ./ Spegel10_avg_BASE;
        Spegel15_avg_FC{j,i} = aveSpegel15 ./ Spegel15_avg_BASE;
        Goehring45_avg_FC{j,i} = aveGoehring45 ./ Goehring45_avg_BASE;  
        Malmgren60_avg_FC{j,i} = aveMalmgren60 ./ Malmgren60_avg_BASE;
    end 
end
VariedKineticModel.outputsFC = FC_everyparam;
VariedKineticModel.log2outputsFC =log2FC_everyparam;
VariedKineticModel.RxnRate_aveSpegel3 = Spegel3_avg;
VariedKineticModel.RxnRate_aveSpegel6 =Spegel6_avg;
VariedKineticModel.RxnRate_aveSpegel10 = Spegel10_avg;
VariedKineticModel.RxnRate_aveSpegel15 = Spegel15_avg;
VariedKineticModel.RxnRate_aveGoehring45 = Goehring45_avg;
VariedKineticModel.RxnRate_aveMalmgren60 = Malmgren60_avg;
VariedKineticModel.RxnRate_allAve = All_avg;
VariedKineticModel.RxnRate_Spegel3 = Spegel3_tot;
VariedKineticModel.RxnRate_Spegel6 = Spegel6_tot;
VariedKineticModel.RxnRate_Spegel10 = Spegel10_tot;
VariedKineticModel.RxnRate_Spegel15 = Spegel15_tot;
VariedKineticModel.RxnRate_Goehring45 = Goehring45_tot;
VariedKineticModel.RxnRate_Malmgren60 = Malmgren60_tot;
VariedKineticModel.RxnRate_aveSpegel3_FC = Spegel3_avg_FC;
VariedKineticModel.RxnRate_aveSpegel6_FC =Spegel6_avg_FC;
VariedKineticModel.RxnRate_aveSpegel10_FC = Spegel10_avg_FC;
VariedKineticModel.RxnRate_aveSpegel15_FC = Spegel15_avg_FC;
VariedKineticModel.RxnRate_aveGoehring45_FC = Goehring45_avg_FC;
VariedKineticModel.RxnRate_aveMalmgren60_FC = Malmgren60_avg_FC;
VariedKineticModel.RxnRate_allAve_FC = All_avg_FC;

pt1_3min = [];
pt1_6min = [];
pt1_10min = [];
pt1_15min = [];
pt1_60min = [];
for i = 1:81
    pt1_3min(:,i) = VariedKineticModel.outputsFC{1,i}(:,1);
    pt1_6min(:,i) = VariedKineticModel.outputsFC{1,i}(:,2);
    pt1_10min(:,i) = VariedKineticModel.outputsFC{1,i}(:,3);
    pt1_15min(:,i) = VariedKineticModel.outputsFC{1,i}(:,4);
    pt1_60min(:,i) = VariedKineticModel.outputsFC{1,i}(:,5);
end
VariedKineticModel.pt1.min3 = pt1_3min;
VariedKineticModel.pt1.min6 = pt1_6min;
VariedKineticModel.pt1.min10 = pt1_10min;
VariedKineticModel.pt1.min15 = pt1_15min;
VariedKineticModel.pt1.min60 = pt1_60min;

pt2_3min = [];
pt2_6min = [];
pt2_10min = [];
pt2_15min = [];
pt2_60min = [];
for i = 1:81
    pt2_3min(:,i) = VariedKineticModel.outputsFC{2,i}(:,1);
    pt2_6min(:,i) = VariedKineticModel.outputsFC{2,i}(:,2);
    pt2_10min(:,i) = VariedKineticModel.outputsFC{2,i}(:,3);
    pt2_15min(:,i) = VariedKineticModel.outputsFC{2,i}(:,4);
    pt2_60min(:,i) = VariedKineticModel.outputsFC{2,i}(:,5);
end
VariedKineticModel.pt2.min3 = pt2_3min;
VariedKineticModel.pt2.min6 = pt2_6min;
VariedKineticModel.pt2.min10 = pt2_10min;
VariedKineticModel.pt2.min15 = pt2_15min;
VariedKineticModel.pt2.min60 = pt2_60min;


pt5_3min = [];
pt5_6min = [];
pt5_10min = [];
pt5_15min = [];
pt5_60min = [];
for i = 1:81
    pt5_3min(:,i) = VariedKineticModel.outputsFC{3,i}(:,1);
    pt5_6min(:,i) = VariedKineticModel.outputsFC{3,i}(:,2);
    pt5_10min(:,i) = VariedKineticModel.outputsFC{3,i}(:,3);
    pt5_15min(:,i) = VariedKineticModel.outputsFC{3,i}(:,4);
    pt5_60min(:,i) = VariedKineticModel.outputsFC{3,i}(:,5);
end
VariedKineticModel.pt5.min3 = pt5_3min;
VariedKineticModel.pt5.min6 = pt5_6min;
VariedKineticModel.pt5.min10 = pt5_10min;
VariedKineticModel.pt5.min15 = pt5_15min;
VariedKineticModel.pt5.min60 = pt5_60min;

two_3min = [];
two_6min = [];
two_10min = [];
two_15min = [];
two_60min = [];
for i = 1:81
    two_3min(:,i) = VariedKineticModel.outputsFC{4,i}(:,1);
    two_6min(:,i) = VariedKineticModel.outputsFC{4,i}(:,2);
    two_10min(:,i) = VariedKineticModel.outputsFC{4,i}(:,3);
    two_15min(:,i) = VariedKineticModel.outputsFC{4,i}(:,4);
    two_60min(:,i) = VariedKineticModel.outputsFC{4,i}(:,5);
end
VariedKineticModel.two.min3 = two_3min;
VariedKineticModel.two.min6 = two_6min;
VariedKineticModel.two.min10 = two_10min;
VariedKineticModel.two.min15 = two_15min;
VariedKineticModel.two.min60 = two_60min;

five_3min = [];
five_6min = [];
five_10min = [];
five_15min = [];
five_60min = [];
for i = 1:81
    five_3min(:,i) = VariedKineticModel.outputsFC{5,i}(:,1);
    five_6min(:,i) = VariedKineticModel.outputsFC{5,i}(:,2);
    five_10min(:,i) = VariedKineticModel.outputsFC{5,i}(:,3);
    five_15min(:,i) = VariedKineticModel.outputsFC{5,i}(:,4);
    five_60min(:,i) = VariedKineticModel.outputsFC{5,i}(:,5);
end
VariedKineticModel.five.min3 = five_3min;
VariedKineticModel.five.min6 = five_6min;
VariedKineticModel.five.min10 = five_10min;
VariedKineticModel.five.min15 = five_15min;
VariedKineticModel.five.min60 = five_60min;

ten_3min = [];
ten_6min = [];
ten_10min = [];
ten_15min = [];
ten_60min = [];
for i = 1:81
    ten_3min(:,i) = VariedKineticModel.outputsFC{6,i}(:,1);
    ten_6min(:,i) = VariedKineticModel.outputsFC{6,i}(:,2);
    ten_10min(:,i) = VariedKineticModel.outputsFC{6,i}(:,3);
    ten_15min(:,i) = VariedKineticModel.outputsFC{6,i}(:,4);
    ten_60min(:,i) = VariedKineticModel.outputsFC{6,i}(:,5);
end

VariedKineticModel.ten.min3 = ten_3min;
VariedKineticModel.ten.min6 = ten_6min;
VariedKineticModel.ten.min10 = ten_10min;
VariedKineticModel.ten.min15 = ten_15min;
VariedKineticModel.ten.min60 = ten_60min;

%% Clean Up variable space
clearvars -except observables ReactionRates PLSR_Overall PLSR_Spegel3 PLSR_Spegel6 PLSR_Spegel10 PLSR_Spegel15 ...
    PLSR_Graham30 PLSR_Malmgren60  VariedKineticModel filename i 
save(filename)
clearvars -except i 

end

